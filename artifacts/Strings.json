{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"linkReferences": {},
			"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b4b9ec5ef7c97aeff253a1d3afdb5bc90a4df1973fd535b14ba697723223f1db64736f6c63430008140033",
			"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xB9 0xEC 0x5E 0xF7 0xC9 PUSH27 0xEFF253A1D3AFDB5BC90A4DF1973FD535B14BA697723223F1DB6473 PUSH16 0x6C634300081400330000000000000000 ",
			"sourceMap": "84262:14535:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
		},
		"deployedBytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"immutableReferences": {},
			"linkReferences": {},
			"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b4b9ec5ef7c97aeff253a1d3afdb5bc90a4df1973fd535b14ba697723223f1db64736f6c63430008140033",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xB9 0xEC 0x5E 0xF7 0xC9 PUSH27 0xEFF253A1D3AFDB5BC90A4DF1973FD535B14BA697723223F1DB6473 PUSH16 0x6C634300081400330000000000000000 ",
			"sourceMap": "84262:14535:0:-:0;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "17000",
				"executionCost": "92",
				"totalCost": "17092"
			},
			"internal": {
				"_tryParseChr(bytes1)": "infinite",
				"_unsafeReadBytesOffset(bytes memory,uint256)": "infinite",
				"equal(string memory,string memory)": "infinite",
				"parseAddress(string memory)": "infinite",
				"parseAddress(string memory,uint256,uint256)": "infinite",
				"parseHexUint(string memory)": "infinite",
				"parseHexUint(string memory,uint256,uint256)": "infinite",
				"parseInt(string memory)": "infinite",
				"parseInt(string memory,uint256,uint256)": "infinite",
				"parseUint(string memory)": "infinite",
				"parseUint(string memory,uint256,uint256)": "infinite",
				"toChecksumHexString(address)": "infinite",
				"toHexString(address)": "infinite",
				"toHexString(uint256)": "infinite",
				"toHexString(uint256,uint256)": "infinite",
				"toString(uint256)": "infinite",
				"toStringSigned(int256)": "infinite",
				"tryParseAddress(string memory)": "infinite",
				"tryParseAddress(string memory,uint256,uint256)": "infinite",
				"tryParseHexUint(string memory)": "infinite",
				"tryParseHexUint(string memory,uint256,uint256)": "infinite",
				"tryParseInt(string memory)": "infinite",
				"tryParseInt(string memory,uint256,uint256)": "infinite",
				"tryParseUint(string memory)": "infinite",
				"tryParseUint(string memory,uint256,uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "StringsInsufficientHexLength",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "StringsInvalidAddressFormat",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "StringsInvalidChar",
			"type": "error"
		}
	]
}